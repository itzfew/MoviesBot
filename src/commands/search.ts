import { Context } from 'telegraf';
import movies from '../../data/movies.json';
import { fetch } from 'undici';

interface MovieItem {
  category: string;
  title: string;
  key: string;
  telegramLink: string;
}

function createTelegramLink(key: string): string {
  return `https://t.me/MovieSearchBot?start=${key}`;
}

let movieData: MovieItem[] = [];
async function initializeMovieData(): Promise<void> {
  const output: MovieItem[] = [];
  for (const cat of movies) {
    for (const item of cat.items) {
      const tgLink = createTelegramLink(item.key);
      output.push({
        category: cat.category,
        title: item.title,
        key: item.key,
        telegramLink: tgLink,
      });
    }
  }
  movieData = output;
}
initializeMovieData().catch(console.error);

function rankedMatches(query: string): MovieItem[] {
  const queryWords = query.toLowerCase().trim().split(/\s+/).filter(Boolean);
  const results: { item: MovieItem; rank: number }[] = [];

  for (const item of movieData) {
    const fullText = `${item.category} ${item.title}`.toLowerCase();
    const fullWords = new Set(fullText.split(/\s+/));
    const matchedWords = queryWords.filter(word => fullWords.has(word));
    const rank = Math.round((matchedWords.length / queryWords.length) * 100);
    if (rank > 0) {
      results.push({ item, rank });
    }
  }

  return results.sort((a, b) => b.rank - a.rank).map(r => r.item);
}

const defaultInstructions = [
  {
    tag: 'p',
    children: ['üé¨ How to watch: ',
      {
        tag: 'a',
        attrs: { href: 'https://youtu.be/your-movie-guide-link' },
        children: ['Watch Guide'],
      }],
  },
  {
    tag: 'p',
    children: ['üì¢ Join our movie channels:']
  },
  {
    tag: 'ul',
    children: [
      {
        tag: 'li',
        children: [{ tag: 'a', attrs: { href: 'https://t.me/MovieSearchBot' }, children: ['@MovieSearchBot'] }, ' - Search for movies']
      }
    ],
  },
];

let accessToken: string | null = null;
async function createTelegraphAccount() {
  const res = await fetch('https://api.telegra.ph/createAccount', {
    method: 'POST',
    body: new URLSearchParams({ short_name: 'moviebot', author_name: 'Movie Bot' }),
  });
  const data = await res.json();
  if (data.ok) accessToken = data.result.access_token;
  else throw new Error(data.error);
}

async function createTelegraphPageForMatches(query: string, matches: MovieItem[]): Promise<string> {
  if (!accessToken) await createTelegraphAccount();

  const content = [
    { tag: 'h3', children: [`Search results for: "${query}"`] },
    { tag: 'p', children: [`Found ${matches.length} movies:`] },
    {
      tag: 'ul',
      children: matches.map((item) => ({
        tag: 'li',
        children: [
          '‚Ä¢ ',
          { tag: 'a', attrs: { href: item.telegramLink, target: '_blank' }, children: [item.title] },
          ` (${item.category})`,
        ]
      }))
    },
    { tag: 'hr' },
    { tag: 'h4', children: ['‚ÑπÔ∏è Instructions & Links'] },
    ...defaultInstructions,
    { tag: 'p', attrs: { style: 'color: gray; font-size: 0.8em' }, children: ['Generated by Movie Bot'] }
  ];

  const res = await fetch('https://api.telegra.ph/createPage', {
    method: 'POST',
    body: new URLSearchParams({
      access_token: accessToken!,
      title: `Movies: ${query.slice(0, 50)}`,
      author_name: 'Movie Bot',
      content: JSON.stringify(content),
      return_content: 'true',
    }),
  });

  const data = await res.json();
  if (data.ok) return `https://telegra.ph/${data.result.path}`;
  throw new Error(data.error);
}

// -------------------- Bot Handler --------------------
export function movieSearch() {
  return async (ctx: Context) => {
    try {
      if (!ctx.message || !('text' in ctx.message)) return;
      const query = ctx.message.text.trim();
      if (!query) {
        await ctx.reply('‚ùå Please enter a movie name.', { reply_to_message_id: ctx.message.message_id });
        return;
      }

      const mention = ctx.chat?.type?.includes('group') && ctx.from?.username
        ? `@${ctx.from.username}`
        : ctx.from?.first_name || '';

      const matches = rankedMatches(query);
      if (matches.length === 0) {
        await ctx.reply(`‚ùå ${mention}, no movies found for "${query}".`, {
          reply_to_message_id: ctx.message.message_id,
        });
        return;
      }

      const telegraphURL = await createTelegraphPageForMatches(query, matches);
      const shortQuery = query.split(/\s+/).slice(0, 3).join(' ');

      await ctx.reply(
        `üîç ${mention}, found *${matches.length}* matches for *${shortQuery}*:\n[View movies](${telegraphURL})`,
        {
          parse_mode: 'Markdown',
          disable_web_page_preview: true,
          reply_to_message_id: ctx.message.message_id,
        }
      );
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå Something went wrong. Please try again later.', {
        reply_to_message_id: ctx.message?.message_id
      });
    }
  };
}
