// src/commands/study.ts
import { Context } from 'telegraf';
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import { createPage } from '../utils/telegraph';
import stringSimilarity from 'string-similarity';

const MATERIAL_PATH = path.join(process.cwd(), 'data/material.json');
const ADRINO_API_KEY = '5a2539904639474b5f3da41f528199204eb76f65';

interface MaterialItem {
  label: string;
  key: string;
}

interface MaterialGroup {
  title: string;
  items: MaterialItem[];
}

export const studySearch = () => async (ctx: Context) => {
  const query = ctx.message?.text?.trim();
  if (!query) return;

  const mention = ctx.from?.first_name || 'User';
  const shortQuery = query.split(" ").slice(0, 5).join(" ");

  let materialGroups: MaterialGroup[] = [];
  try {
    const raw = fs.readFileSync(MATERIAL_PATH, 'utf-8');
    materialGroups = JSON.parse(raw);
  } catch (err) {
    console.error('Failed to read material.json:', err);
    return ctx.reply('❌ Failed to load study materials.');
  }

  const allItems: (MaterialItem & { title: string })[] = materialGroups.flatMap(group =>
    group.items.map(item => ({ ...item, title: group.title }))
  );

  const matches = allItems.filter(item => {
    const score = stringSimilarity.compareTwoStrings(query.toLowerCase(), item.label.toLowerCase());
    return score >= 0.4;
  });

  if (matches.length === 0) return ctx.reply(`❌ No results found for: "${query}"`);

  const withLinks = await Promise.all(
    matches.map(async (item) => {
      const key = item.key.length > 30 ? item.key.slice(0, 30) : item.key;
      const tgLink = `https://t.me/Material_eduhubkmrbot?start=${item.key}`;
      const adrinoUrl = `https://adrinolinks.in/api?api=${ADRINO_API_KEY}&url=${encodeURIComponent(tgLink)}&alias=${key}`;

      try {
        const { data } = await axios.get(adrinoUrl);
        return {
          ...item,
          shortenedLink: data.shortenedUrl || tgLink,
        };
      } catch (err) {
        console.warn('Adrino link failed for:', item.key);
        return {
          ...item,
          shortenedLink: tgLink,
        };
      }
    })
  );

  const defaultInstructions = [
    {
      tag: 'p',
      children: [
        '📺 Tutorial: ',
        {
          tag: 'a',
          attrs: { href: 'https://youtube.com/watch?v=dQw4w9WgXcQ' },
          children: ['YouTube Guide'],
        },
      ],
    },
    {
      tag: 'p',
      children: ['📚 Join channels for updates:']
    },
    {
      tag: 'ul',
      children: [
        {
          tag: 'li',
          children: [
            {
              tag: 'a',
              attrs: { href: 'https://t.me/Material_eduhubkmrbot' },
              children: ['@Material_eduhubkmrbot'],
            },
            ' - Study materials',
          ],
        },
        {
          tag: 'li',
          children: [
            {
              tag: 'a',
              attrs: { href: 'https://t.me/EduhubKMR_bot' },
              children: ['@EduhubKMR_bot'],
            },
            ' - QuizBot',
          ],
        },
      ],
    },
  ];

  const content = [
    {
      tag: 'h3',
      children: [`Results for: "${query}"`],
    },
    {
      tag: 'p',
      children: [`Found ${withLinks.length} study materials:`],
    },
    {
      tag: 'ul',
      children: withLinks.map(item => ({
        tag: 'li',
        children: [
          '• ',
          {
            tag: 'a',
            attrs: { href: item.shortenedLink, target: '_blank' },
            children: [item.label],
          },
          ` (${item.title})`,
        ],
      })),
    },
    { tag: 'hr' },
    {
      tag: 'h4',
      children: ['ℹ️ Resources & Instructions']
    },
    ...defaultInstructions,
    {
      tag: 'p',
      attrs: { style: 'color: gray; fontSize: 0.8em' },
      children: ['Generated by Study Bot'],
    },
  ];

  try {
    const { url } = await createPage('Study Bot', content);
    return ctx.replyWithMarkdown(`🔍 ${mention}, found *${withLinks.length}* matches for *${shortQuery}*:\n[View materials](${url})`);
  } catch (err) {
    console.error('Telegraph error:', err);
    return ctx.reply('❌ Failed to generate preview.');
  }
};
