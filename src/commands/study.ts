import { Context } from 'telegraf';
import material from '../../data/material.json';

interface MaterialItem {
  title: string;
  label: string;
  key: string;
  telegramLink: string;
  shortenedLink: string;
}

let accessToken: string | null = null;
const ADRINO_API_KEY = '5a2539904639474b5f3da41f528199204eb76f65';

// -------------------- Helpers --------------------
function createTelegramLink(key: string): string {
  return `https://t.me/Material_eduhubkmrbot?start=${key}`;
}

async function shortenLink(link: string, alias: string): Promise<string> {
  try {
    const url = `https://adrinolinks.in/api?api=${ADRINO_API_KEY}&url=${encodeURIComponent(link)}&alias=${alias}`;
    const res = await fetch(url);
    const data = await res.json();
    return data.status === 'success' ? data.shortenedUrl : link;
  } catch (e) {
    console.error('Shorten failed:', e);
    return link;
  }
}

function similarity(a: string, b: string): number {
  const sa = new Set(a.toLowerCase());
  const sb = new Set(b.toLowerCase());
  const common = [...sa].filter(ch => sb.has(ch)).length;
  return common / Math.max(sa.size, sb.size);
}

// -------------------- Prepare & Match --------------------
async function prepareMaterialData(): Promise<MaterialItem[]> {
  const output: MaterialItem[] = [];
  for (const cat of material) {
    for (const item of cat.items) {
      const tgLink = createTelegramLink(item.key);
      const shortLink = await shortenLink(tgLink, item.key);
      output.push({ title: cat.title, label: item.label, key: item.key, telegramLink: tgLink, shortenedLink: shortLink });
    }
  }
  return output;
}

async function matchMaterial(query: string): Promise<MaterialItem[]> {
  const keywords = query.toLowerCase().split(/\s+/);
  const all = await prepareMaterialData();

  return all.filter(item => {
    const text = `${item.title} ${item.label}`.toLowerCase();
    return keywords.some(k => text.includes(k) || similarity(text, k) > 0.4);
  });
}

// -------------------- Telegraph Integration --------------------
const defaultInstructions = [
  { tag: 'p', children: ['üì∫ Tutorial: ', { tag: 'a', attrs: { href: 'https://youtube.com/watch?v=dQw4w9WgXcQ' }, children: ['YouTube Guide'] }] },
  { tag: 'p', children: ['üìö Join channels for updates:'] },
  {
    tag: 'ul',
    children: [
      { tag: 'li', children: [{ tag: 'a', attrs: { href: 'https://t.me/Material_eduhubkmrbot' }, children: ['@Material_eduhubkmrbot'] }, ' - Study materials'] },
      { tag: 'li', children: [{ tag: 'a', attrs: { href: 'https://t.me/EduhubKMR_bot' }, children: ['@EduhubKMR_bot'] }, ' - QuizBot'] },
    ]
  }
];

async function createTelegraphAccount() {
  const res = await fetch('https://api.telegra.ph/createAccount', {
    method: 'POST',
    body: new URLSearchParams({ short_name: 'studybot', author_name: 'Study Bot' }),
  });

  const data = await res.json();
  if (data.ok) accessToken = data.result.access_token;
  else throw new Error(data.error || 'Telegraph account creation failed');
}

async function createTelegraphPageForMatches(query: string, matches: MaterialItem[]): Promise<string> {
  if (!accessToken) await createTelegraphAccount();

  const content = [
    { tag: 'h3', children: [`Results for: "${query}"`] },
    { tag: 'p', children: [`Found ${matches.length} study materials:`] },
    {
      tag: 'ul',
      children: matches.map(item => ({
        tag: 'li',
        children: [
          '‚Ä¢ ',
          { tag: 'a', attrs: { href: item.shortenedLink, target: '_blank' }, children: [item.label] },
          ` (${item.title})`
        ]
      }))
    },
    { tag: 'hr' },
    { tag: 'h4', children: ['‚ÑπÔ∏è Resources & Instructions'] },
    ...defaultInstructions,
    { tag: 'hr' },
    { tag: 'p', attrs: { style: 'color: gray; font-size: 0.8em' }, children: ['Generated by Study Bot'] }
  ];

  const res = await fetch('https://api.telegra.ph/createPage', {
    method: 'POST',
    body: new URLSearchParams({
      access_token: accessToken!,
      title: `Study Material: ${query.substring(0, 50)}${query.length > 50 ? '...' : ''}`,
      author_name: 'Study Bot',
      content: JSON.stringify(content),
      return_content: 'true'
    }),
  });

  const data = await res.json();
  if (data.ok) return `https://telegra.ph/${data.result.path}`;
  else throw new Error(data.error || 'Page creation failed');
}

// -------------------- Bot Command Handler --------------------
export function studySearch() {
  return async (ctx: Context) => {
    try {
      if (!ctx.message || !('text' in ctx.message)) {
        return ctx.reply('‚ùå Please send a text to search study materials.');
      }

      const query = ctx.message.text.trim();
      if (!query) {
        return ctx.reply('‚ùå Please enter a search term.');
      }

      const matches = await matchMaterial(query);
      if (matches.length === 0) {
        return ctx.reply('‚ùå No matching materials found. Try different keywords.');
      }

      const url = await createTelegraphPageForMatches(query, matches);

      await ctx.reply(`üîç [View ${matches.length} matched study materials](${url})`, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });

    } catch (error) {
      console.error('Study search error:', error);
      ctx.reply('‚ùå An error occurred. Please try again later.');
    }
  };
}
