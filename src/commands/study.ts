// src/commands/study.ts
import { Context } from 'telegraf';
import axios from 'axios';
import materialData from '../../data/material.json';
import { saveToSheet } from '../utils/saveToSheet';

const ADRINO_API_KEY = '5a2539904639474b5f3da41f528199204eb76f65';

interface MaterialItem {
  label: string;
  key: string;
  aliases?: string[];
}

interface MaterialCategory {
  title: string;
  items: MaterialItem[];
}

interface SearchMatch {
  label: string;
  title: string;
  key: string;
  shortenedLink: string;
}

// Cache for Adrino links to avoid duplicate API calls
const linkCache = new Map<string, string>();

// -------------------- Telegraph Integration --------------------
const defaultInstructions = [
  {
    tag: 'p',
    children: [
      'üì∫ Tutorial: ',
      {
        tag: 'a',
        attrs: { href: 'https://youtube.com/watch?v=dQw4w9WgXcQ' },
        children: ['YouTube Guide'],
      },
    ],
  },
  {
    tag: 'p',
    children: ['üìö Join channels for updates:']
  },
  {
    tag: 'ul',
    children: [
      {
        tag: 'li',
        children: [
          {
            tag: 'a',
            attrs: { href: 'https://t.me/Material_eduhubkmrbot' },
            children: ['@Material_eduhubkmrbot'],
          },
          ' - Study materials',
        ],
      },
      {
        tag: 'li',
        children: [
          {
            tag: 'a',
            attrs: { href: 'https://t.me/EduhubKMR_bot' },
            children: ['@EduhubKMR_bot'],
          },
          ' - QuizBot',
        ],
      },
    ],
  },
];

async function createTelegraphPage(query: string, matches: SearchMatch[]): Promise<string> {
  try {
    const content = [
      {
        tag: 'h3',
        children: [`Results for: "${query}"`]
      },
      {
        tag: 'p',
        children: [`Found ${matches.length} study materials:`]
      },
      {
        tag: 'ul',
        children: matches.map(item => ({
          tag: 'li',
          children: [
            '‚Ä¢ ',
            {
              tag: 'a',
              attrs: { href: item.shortenedLink, target: '_blank' },
              children: [item.label],
            },
            ` (${item.title})`,
          ],
        })),
      },
      {
        tag: 'hr'
      },
      {
        tag: 'h4',
        children: ['‚ÑπÔ∏è Resources & Instructions']
      },
      ...defaultInstructions,
      {
        tag: 'p',
        attrs: { style: 'color: gray; font-size: 0.8em' },
        children: ['Generated by Study Bot'],
      },
    ];

    const response = await axios.post('https://api.telegra.ph/createPage', {
      title: `Study Materials: ${query}`,
      author_name: 'EduHub Bot',
      author_url: 'https://t.me/Material_eduhubkmrbot',
      content,
      return_content: false,
    });

    return `https://telegra.ph/${response.data.result.path}`;
  } catch (error) {
    console.error('Error creating Telegraph page:', error);
    throw error;
  }
}

async function getAdrinoLink(key: string): Promise<string> {
  // Check cache first
  if (linkCache.has(key)) {
    return linkCache.get(key)!;
  }

  // Ensure key is not too long (Adrino API limit)
  const alias = key.length > 30 ? key.substring(0, 30) : key;
  const link = `https://t.me/Material_eduhubkmrbot?start=${key}`;

  try {
    const response = await axios.get(
      `https://adrinolinks.in/api?api=${ADRINO_API_KEY}&url=${encodeURIComponent(link)}&alias=${alias}`
    );

    if (response.data.status === 'success') {
      const shortenedLink = response.data.shortenedUrl;
      linkCache.set(key, shortenedLink);
      return shortenedLink;
    }
    throw new Error(response.data.message || 'Failed to shorten link');
  } catch (error) {
    console.error('Error getting Adrino link:', error);
    // Fallback to direct link if Adrino fails
    return link;
  }
}

function findMatchingMaterials(query: string): SearchMatch[] {
  const lowerQuery = query.toLowerCase();
  const matches: SearchMatch[] = [];

  // Search through all materials
  (materialData as MaterialCategory[]).forEach(category => {
    category.items.forEach(item => {
      // Check label match
      const labelMatch = item.label.toLowerCase().includes(lowerQuery);
      
      // Check key match
      const keyMatch = item.key.toLowerCase().includes(lowerQuery);
      
      // Check aliases if they exist
      const aliasMatch = item.aliases?.some(alias => 
        alias.toLowerCase().includes(lowerQuery)
        || false;

      // If any match is found (40% threshold is handled by the caller)
      if (labelMatch || keyMatch || aliasMatch) {
        matches.push({
          label: item.label,
          title: category.title,
          key: item.key,
          shortenedLink: '', // Will be populated later
        });
      }
    });
  });

  return matches;
}

export function studySearch() {
  return async (ctx: Context) => {
    try {
      const query = ctx.message?.text?.trim();
      if (!query) return;

      // Show typing action
      await ctx.sendChatAction('typing');

      // Find matches (minimum 40% match)
      const allMatches = findMatchingMaterials(query);
      
      // If no matches found, check with partial matching
      const matches = allMatches.length > 0 
        ? allMatches 
        : findMatchingMaterials(query.substring(0, Math.floor(query.length * 0.4)) || [];

      if (matches.length === 0) {
        await ctx.reply('No study materials found for your query. Try different keywords.');
        return;
      }

      // Get Adrino links for all matches (in parallel)
      await Promise.all(matches.map(async (match) => {
        match.shortenedLink = await getAdrinoLink(match.key);
      }));

      // Create Telegraph page
      const telegraphUrl = await createTelegraphPage(query, matches);

      // Prepare response
      const mention = ctx.from?.username 
        ? `@${ctx.from.username}` 
        : ctx.from?.first_name || 'there';
      const shortQuery = query.length > 20 
        ? `${query.substring(0, 20)}...` 
        : query;

      await ctx.replyWithMarkdown(
        `üîç ${mention}, found *${matches.length}* matches for *${shortQuery}*:\n[View materials](${telegraphUrl})`,
        { disable_web_page_preview: false }
      );

      // Log the interaction
      if (ctx.chat) {
        await saveToSheet(ctx.chat);
      }
    } catch (error) {
      console.error('Error in studySearch:', error);
      await ctx.reply('‚ö†Ô∏è An error occurred while searching. Please try again later.');
    }
  };
}
